---

- name: UIM Server Build and Install
  hosts: localhost
  gather_facts: true
  connection: local
  vars:
    server_name: UIMTST
    server_count: 1
    def_cpu: 4
    def_mem: 8
    type: standard
    disk:
      - sizeGB: 350
        type: partitioned
        path: /uim

  tasks:
  - name: Provision RHEL Server
    clc_server:
      name: "{{server_name}}"
      template: rhel-6-64
      password: "{{ server_password }}"
      group: "{{ server_group }}"
      count: "{{server_count}}"
      location: "{{datacenter_name}}"
      storage_type: "standard"
      additional_disks: "{{ disk }}"
      cpu: "{{def_cpu}}" # Default -- not necessary
      memory: "{{def_mem}}" # Default -- not necessary
    register: provisioned
  - name: Wait for ssh to come up on the server
    command: sleep 30
  - name: "Add server to in-memory Group"
    add_host:
      name={{ item.name }}
      ansible_ssh_host={{ item.ipaddress }}
      ansible_ssh_user=root
      ansible_ssh_pass="{{ server_password }}"
      groupname="Servers"
    with_flattened: provisioned.servers

- name: Install UIM
  hosts: Servers
  gather_facts: true
  connection: ssh
  vars:
    PW: "QWzxPOmn0987!@#$"
    DOMAIN: "t3n"
    USER: "svc_ecosys"
  tasks:
  - name: yum cleanup
    shell: yum-complete-transaction -y
  - name: yum cleanup 2
    shell: yum-complete-transaction -y
  - name: yum cleanup 3
    shell: yum-complete-transaction -y
  - name: create install dir
    file: path=/uim state=directory
  - name: file retrieve
    mount: src=//172.17.1.23/Software name=/mnt opts=domain='{{ DOMAIN }}',username='{{ USER }}',password='{{ PW }}' fstype=cifs state=mounted
  - name: File move
    shell: cp /mnt/Ecosystem_Images/CA/UIM/uim.zip /uim/uim.zip
  - name: unmount
    shell: umount /mnt
  - name: expand archive
    unarchive: src=/uim/uim.zip dest=/uim copy=no
  - name: properties file setup
    lineinfile: dest=/uim/NMS_installer.properties regexp=DB_ADMIN_USER=root line=DB_ADMIN_USER={{ db_admin_username }}
    lineinfile: dest=/uim/NMS_installer.properties regexp=DB_ADMIN_PASSWORD=nimsoft line=DB_ADMIN_PASSWORD={{ db_admin_password }}
    lineinfile: dest=/uim/NMS_installer.properties regexp=NIM_USER=administrator line=NIM_USER={{ uim_admin_username }}
    lineinfile: dest=/uim/NMS_installer.properties regexp=NMS_PASSWORD=nimsoft line=NIM_USER={{ uim_admin_password }}
    lineinfile: dest=/uim/NMS_installer.properties regexp=NIMBUS_USERNAME=administrator line=NIMBUS_USERNAME={{ uim_admin_username }}
    lineinfile: dest=/uim/NMS_installer.properties regexp=NIMBUS_PASSWORD=nimsoft line=NIMBUS_PASSWORD={{ uim_admin_password }}
  - name: setup install dirs
    file: path=/uim/log state=directory
    file: path=/uim/automation state=directory
  - name: setup dependencies
    yum: name=compat-libstdc++-33 state=latest
  - name: setup java
    yum: name=java-1.7.0-openjdk-devel.x86_64 state=latest
  - name: setup expect
    yum: name=expect state=latest
  - name: setup mysql
    yum: name=/uim/bin/mysql-community-release-el6-5.noarch.rpm state=present
  - name: setup mysql Server
    yum: name=mysql-server state=latest
  - name: backup my.cnf
    shell: cp /etc/my.cnf /etc/my.cnf.bak
  - name: install my.cnf
    shell: cp /uim/my.cnf /etc/
  - name: create /tmp sock for mysql
    file: src=/var/lib/mysql/mysql.sock path=/tmp/mysql.sock state=link force=yes
  - name: start mysql service
    service: name=mysqld state=started
  - name: setup chkconfig
    shell: chkconfig --level 345 mysqld on
  - name: set mysql password locally
    shell: mysqladmin -u root password {{ db_admin_password }}
  - name: localhost password
    shell: mysqladmin -u root --password={{ db_admin_password }}  -h localhost password {{ db_admin_password }}
  - name: hostname password
    shell: mysqladmin -u root --password={{ db_admin_password }} -h {{ ansible_hostname }} password {{ db_admin_password }}
  - name: initialize DB
    shell: mysql --user=root --password={{ db_admin_password }}  --verbose < /uim/mysql-init.sql
  - name: access to simulators
    yum: name=net-snmp-utils state=latest
  - name: edit hosts file
    shell: echo "{{ ansible_default_ipv4.address }} {{ ansible_hostname }}>> /etc/hosts  "
  - name: setup work dir in tmp
    file: path=/uim/automation state=directory mode=0700
  - name: get file names
    shell: ls /uim/bin/*bin
    register: file_list
  - name: copy bin files
    shell:  cp {{ item }} /uim/automation
    with_items: file_list.stdout_lines
  - name: clean left brackets
    replace: dest=/uim/NMS_installer.properties regexp=\{\{ replace=' '
  - name: clean right brackets
    replace: dest=/uim/NMS_installer.properties regexp=}} replace=''
  - name: setup NMS file in /tmp hostname
    replace: dest=/uim/NMS_installer.properties regexp=anisble_hostname  replace={{ ansible_hostname }}
  - name: setup NMS file in /tmp address
    replace: dest=/uim/NMS_installer.properties regexp=anisble_eth0.ipv4_address replace={{ ansible_default_ipv4.address }}
  - name: copy file to /tmp
    shell: cp /uim/NMS_installer.properties /uim/automation/NMS_installer.properties
  - name: install CA UIM
    shell: /uim/automation/setupCAUIMServer_linux.bin -i silent -f  /uim/automation/NMS_installer.properties
  - name: clean left brackets from UMP file
    replace: dest=/uim/UMP_installer.properties regexp=\{\{ replace=''
  - name: clean right brackets from UMP file
    replace: dest=/uim/UMP_installer.properties regexp=}} replace=''
  - name: setup hostname in UMP file
    replace: dest=/uim/UMP_installer.properties regexp=anisble_hostname replace=ansible_hostname
  - name: setup ip address in UMP file
    replace: dest=/uim/UMP_installer.properties regexp=anisble_eth0.ipv4_address replace=ansible_default_ipv4.address
  - name: copy UMP file
    shell: cp /uim/UMP_installer.properties /uim/automation/UMP_installer.properties
  - name: install UMP
    shell: export IATEMPDIR=/uim;/uim/automation/installUMP_linux.bin -i silent -f UMP_installer.properties
